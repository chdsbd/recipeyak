# Generated by Django 3.2.9 on 2023-01-01 15:42

from typing import Any

import structlog
from django.db import migrations

logger = structlog.stdlib.get_logger()


def migrate(apps: Any, schema_editor: Any) -> None:
    Recipe = apps.get_model("recipeyak", "Recipe")
    with schema_editor.connection.cursor() as conn:
        logger.info("starting migration...")

        conn.execute(
            """
        SELECT
            django_content_type.id,
            django_content_type.model
        FROM
            django_content_type
        WHERE
            django_content_type.model = 'team'
        """
        )
        res = conn.fetchone()
        if res is None:
            logger.info("skipping migration")
            return

        (team_content_type_id, team_content_type_name) = res
        logger.info(
            "fetch content type",
            team_content_type_id=team_content_type_id,
            team_content_type_name=team_content_type_name,
        )

        conn.execute(
            """
            SELECT
                core_recipe.id "recipe_id",
                core_team.id "new_object_id",
                core_recipe.object_id "old_object_id",
                core_recipe.content_type_id "old_content_type_id"
            FROM
                core_recipe
                JOIN django_content_type ON core_recipe.content_type_id = django_content_type.id
                join core_myuser on core_myuser.id = core_recipe.object_id
                join core_team on core_team.id = core_myuser.schedule_team_id

            WHERE
                core_recipe.object_id IS NOT NULL
                and django_content_type.id != %(team_content_type_id)s;
            """,
            {"team_content_type_id": team_content_type_id},
        )
        results = conn.fetchmany()

    logger.info("fetched recipes")

    for (
        recipe_id,
        new_object_id,
        old_object_id,
        old_content_type_id,
    ) in results:
        log = logger.bind(
            recipe_id=recipe_id,
            old_object_id=old_object_id,
            old_content_type_id=old_content_type_id,
            new_object_id=new_object_id,
            new_content_type_id=team_content_type_id,
        )
        log.info("updating recipe...")
        Recipe.objects.filter(
            id=recipe_id, object_id=old_object_id, content_type_id=old_content_type_id
        ).update(content_type_id=team_content_type_id, object_id=new_object_id)
        log.info("updated recipe!")

    logger.info("all done!")


class Migration(migrations.Migration):
    dependencies = [
        ("recipeyak", "0109_auto_20230101_0030"),
    ]

    operations = [migrations.RunPython(migrate)]
