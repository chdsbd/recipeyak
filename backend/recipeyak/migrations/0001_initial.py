# Generated by Django 3.2.9 on 2023-12-29 18:36

import django.contrib.postgres.fields
import django.contrib.postgres.fields.citext
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.contrib.postgres.operations import CITextExtension, CreateExtension
from django.db import migrations, models

import recipeyak.models.membership


class PgStatStatements(CreateExtension):
    def __init__(self) -> None:
        self.name = "pg_stat_statements"


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        PgStatStatements(),
        CITextExtension(),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "email",
                    django.contrib.postgres.fields.citext.CIEmailField(
                        max_length=254, unique=True
                    ),
                ),
                ("name", models.TextField(null=True)),
                ("created", models.DateField(auto_now_add=True)),
                ("last_updated", models.DateField(auto_now=True)),
                ("theme_day", models.TextField(db_column="theme", default="light")),
                ("theme_night", models.TextField(default="dark")),
                ("theme_mode", models.TextField(default="single")),
            ],
            options={
                "db_table": "core_myuser",
            },
        ),
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("quantity", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("position", models.TextField(db_column="position")),
                ("optional", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "core_ingredient",
                "ordering": ["position"],
            },
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("text", models.TextField()),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes_created_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes_last_modified_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "core_note",
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="Recipe",
            fields=[
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("author", models.CharField(blank=True, max_length=255, null=True)),
                ("source", models.CharField(blank=True, max_length=255, null=True)),
                ("time", models.CharField(blank=True, max_length=255, null=True)),
                ("servings", models.CharField(blank=True, max_length=255, null=True)),
                ("archived_at", models.DateTimeField(null=True)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        default=list,
                        help_text="Tags for organization recipes.",
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "core_recipe",
            },
        ),
        migrations.CreateModel(
            name="ScheduledRecipe",
            fields=[
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("on", models.DateField(help_text="day when recipe is scheduled")),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipeyak.recipe",
                    ),
                ),
            ],
            options={
                "db_table": "core_scheduledrecipe",
                "ordering": ["-on"],
            },
        ),
        migrations.CreateModel(
            name="Scrape",
            fields=[
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("html", models.TextField()),
                ("url", models.TextField()),
                ("duration_sec", models.IntegerField()),
                ("parsed", models.JSONField()),
            ],
            options={
                "db_table": "scrape",
            },
        ),
        migrations.CreateModel(
            name="SearchClick",
            fields=[
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("content", models.JSONField()),
            ],
            options={
                "db_table": "search_click",
            },
        ),
        migrations.CreateModel(
            name="ShoppingList",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("ingredients", models.JSONField()),
            ],
            options={
                "db_table": "core_shoppinglist",
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "core_team",
            },
        ),
        migrations.CreateModel(
            name="Upload",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("bucket", models.TextField()),
                ("key", models.TextField()),
                ("content_type", models.TextField()),
                ("completed", models.BooleanField(default=False)),
                ("background_url", models.TextField(null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "note",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploads",
                        to="recipeyak.note",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploads",
                        to="recipeyak.recipe",
                    ),
                ),
                (
                    "scraped_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="scrapes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "core_upload",
            },
        ),
        migrations.CreateModel(
            name="TimelineEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("action", models.CharField(max_length=255)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipeyak.recipe",
                    ),
                ),
                (
                    "upload",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="recipeyak.upload",
                    ),
                ),
            ],
            options={
                "db_table": "timeline_event",
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="Step",
            fields=[
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("text", models.TextField()),
                ("position", models.TextField(db_column="position")),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipeyak.recipe",
                    ),
                ),
            ],
            options={
                "db_table": "core_step",
                "ordering": ["position"],
            },
        ),
        migrations.CreateModel(
            name="Section",
            fields=[
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "title",
                    models.CharField(
                        help_text="name of the ingredient section group", max_length=255
                    ),
                ),
                ("position", models.TextField(db_column="position")),
                (
                    "recipe",
                    models.ForeignKey(
                        help_text="Recipe the section is part of.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipeyak.recipe",
                    ),
                ),
            ],
            options={
                "db_table": "core_section",
                "ordering": ["position"],
            },
        ),
        migrations.CreateModel(
            name="ScheduleEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("before_on", models.DateField()),
                ("after_on", models.DateField()),
                (
                    "actor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "scheduled_recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipeyak.scheduledrecipe",
                    ),
                ),
            ],
            options={
                "db_table": "schedule_event",
                "ordering": ["-created"],
            },
        ),
        migrations.AddField(
            model_name="scheduledrecipe",
            name="team",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="recipeyak.team",
            ),
        ),
        migrations.CreateModel(
            name="RecipeView",
            fields=[
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("last_visited_at", models.DateTimeField(auto_now=True)),
                ("count", models.IntegerField()),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipeyak.recipe",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "recipe_view",
                "ordering": ["-last_visited_at"],
            },
        ),
        migrations.CreateModel(
            name="RecipeCookChecklistCheck",
            fields=[
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("checked", models.BooleanField()),
                (
                    "ingredient",
                    models.ForeignKey(
                        help_text="The related recipe",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipeyak.ingredient",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        help_text="The related recipe",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipeyak.recipe",
                    ),
                ),
            ],
            options={
                "db_table": "recipe_cook_checklist_check",
            },
        ),
        migrations.CreateModel(
            name="RecipeChange",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "before",
                    models.TextField(
                        blank=True,
                        help_text="The previous value, sometimes derived from multiple fields",
                    ),
                ),
                (
                    "after",
                    models.TextField(
                        help_text="The new value, sometimes derived from multiple fields"
                    ),
                ),
                (
                    "change_type",
                    models.CharField(
                        choices=[
                            ("NAME", "NAME"),
                            ("AUTHOR", "AUTHOR"),
                            ("SOURCE", "SOURCE"),
                            ("SERVINGS", "SERVINGS"),
                            ("TIME", "TIME"),
                            ("STEP_CREATE", "STEP_CREATE"),
                            ("STEP_UPDATE", "STEP_UPDATE"),
                            ("STEP_DELETE", "STEP_DELETE"),
                            ("INGREDIENT_CREATE", "INGREDIENT_CREATE"),
                            ("INGREDIENT_UPDATE", "INGREDIENT_UPDATE"),
                            ("INGREDIENT_DELETE", "INGREDIENT_DELETE"),
                            ("SECTION_CREATE", "SECTION_CREATE"),
                            ("SECTION_UPDATE", "SECTION_UPDATE"),
                            ("SECTION_DELETE", "SECTION_DELETE"),
                        ],
                        help_text="The field / model changed.",
                        max_length=255,
                    ),
                ),
                (
                    "actor",
                    models.ForeignKey(
                        help_text="User who made the change.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        help_text="Recipe this change is for.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="recipeyak.recipe",
                    ),
                ),
            ],
            options={
                "db_table": "core_recipechange",
            },
        ),
        migrations.AddField(
            model_name="recipe",
            name="primary_image",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="recipeyak.upload",
            ),
        ),
        migrations.AddField(
            model_name="recipe",
            name="scrape",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="recipeyak.scrape",
            ),
        ),
        migrations.AddField(
            model_name="recipe",
            name="team",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="recipeyak.team",
            ),
        ),
        migrations.CreateModel(
            name="Reaction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("emoji", models.TextField()),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "note",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="recipeyak.note",
                    ),
                ),
            ],
            options={
                "db_table": "core_reaction",
                "ordering": ["-created"],
            },
        ),
        migrations.AddField(
            model_name="note",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notes",
                to="recipeyak.recipe",
            ),
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("admin", "admin"),
                            ("contributor", "contributor"),
                            ("read", "read"),
                        ],
                        default="contributor",
                        max_length=11,
                    ),
                ),
                (
                    "calendar_sync_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="When enabled, accept requests that have the valid secret key.",
                    ),
                ),
                (
                    "calendar_secret_key",
                    models.TextField(
                        default=recipeyak.models.membership.get_random_ical_id,
                        help_text="Secret key used to construct the icalendar url.",
                    ),
                ),
                ("is_active", models.BooleanField(default=False)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="recipeyak.team"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "core_membership",
            },
        ),
        migrations.CreateModel(
            name="Invite",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "open"),
                            ("declined", "declined"),
                            ("accepted", "accepted"),
                        ],
                        default="open",
                        max_length=11,
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "membership",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipeyak.membership",
                    ),
                ),
            ],
            options={
                "db_table": "core_invite",
            },
        ),
        migrations.AddField(
            model_name="ingredient",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="recipeyak.recipe"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="schedule_team",
            field=models.ForeignKey(
                blank=True,
                help_text="default team selected for scheduled view.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="recipeyak.team",
            ),
        ),
        migrations.AddConstraint(
            model_name="recipeview",
            constraint=models.UniqueConstraint(
                fields=("recipe", "user"), name="one_user_view_row_per_recipe"
            ),
        ),
        migrations.AddConstraint(
            model_name="recipecookchecklistcheck",
            constraint=models.UniqueConstraint(
                fields=("recipe", "ingredient"), name="recipe_ingredient_uniq"
            ),
        ),
        migrations.AddConstraint(
            model_name="reaction",
            constraint=models.UniqueConstraint(
                fields=("emoji", "created_by", "note"), name="one_reaction_per_user"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="membership",
            unique_together={("user", "team")},
        ),
    ]
