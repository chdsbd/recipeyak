from collections.abc import Iterator
from typing import Any, overload

from ably.http.http import Response
from ably.rest.rest import AblyRest
from ably.types.channeldetails import ChannelDetails
from ably.types.message import Message
from ably.types.presence import Presence

class Channel:
    def __init__(self, ably: AblyRest, name: str, options: Any) -> None: ...
    @overload
    async def publish(
        self,
        name: str,
        data: bytes | str | list[Any] | dict[str, Any] | bytearray,
    ) -> Response: ...
    @overload
    async def publish(
        self,
        messages: list[Message],
    ) -> Response: ...
    @overload
    async def publish(
        self,
        message: Message,
    ) -> Response: ...
    async def status(self) -> ChannelDetails: ...
    @property
    def ably(self) -> AblyRest: ...
    @property
    def name(self) -> str: ...
    @property
    def presence(self) -> Presence: ...

class Channels:
    def __init__(self, rest: Any) -> None: ...
    def get(self, name: str | bytes, **kwargs: Any) -> Channel: ...
    def __getitem__(self, key: str | bytes) -> Channel: ...
    def __getattr__(self, name: str | bytes) -> Channel: ...
    def __contains__(self, item: str | bytes | Channel) -> bool: ...
    def __iter__(self) -> Iterator[str]: ...
    def release(self, name: str) -> None: ...
