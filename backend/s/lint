#!/usr/bin/env bash
set -e

cd $(dirname $(dirname "$0"))

if [[ -f ../.env ]]; then
    # export all variables from env file
    set -a
    source ../.env
    set +a
fi

MYPY_ARGS=''
if [[ $CI ]]; then
  mkdir -p backend/reports
  MYPY_ARGS='--junit-xml backend/reports/mypy.xml'
fi

# include "." and find all python files with a shebang
FILES=".";
EXECUTABLE_FILES="$(find . ! -name '*.py' -perm +111 -type f)";
if [ -n "$EXECUTABLE_FILES" ];then
    set +e
    # regex on python3, python2, python3.*, python2.*
    SHEBANG_FILES=$(grep -E -l '^#!/usr/bin/env python(2|3)?(\.\d)?$' $EXECUTABLE_FILES)
    set -e
    FILES="$FILES ""$SHEBANG_FILES"
fi

echo 'start mypy'
(poetry run mypy --config-file tox.ini $MYPY_ARGS $FILES) &

echo 'start flake8'
(poetry run flake8 $FILES) &

echo 'start black'

# black --quiet is too quiet, so we grep for 'would format' in stderr
(poetry run black --check $FILES 2> >( grep 'would reformat');) &

if [[ "$@" == *'--db'* ]] || [[ $CI ]]; then
    echo 'check for missing migrations'
    ./s/check_missing_migrations &
else
    echo '--db not passed. Skipping migration check that requires Postgres.'
fi


echo 'wait for background jobs to execute'
FAIL=0
for job in $(jobs -p)
do
    wait $job || FAIL=1
    echo 'job finished'
done

if [[ $FAIL -gt 0 ]]; then
    echo 'ðŸš¨  Failure'
else
    echo 'âœ…  Success'
fi

exit $FAIL
