version: 2

jobs:

  backend_test:
    docker:
      - image: circleci/python:3.6.4
        environment:
          DEBUG: 1
          DATABASE_URL: postgres://postgres@127.0.0.1:5432/postgres
          PIPENV_VENV_IN_PROJECT: 1
      # https://circleci.com/docs/2.0/postgres-config/#optimizing-postgres-images
      - image: circleci/postgres:9.5-alpine-ram
    steps:
      - checkout
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - backend-v2-{{ .Branch }}-{{ checksum "backend/pyproject.lock" }}
            - backend-v2-{{ .Branch }}-
            - backend-v2-
      - run:
          name: install dependencies
          working_directory: backend
          command: |
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            # Use our new PATH so we can call poetry from bash
            source $BASH_ENV
            python3 -m pip install --user poetry===0.11.5
            poetry install
      - save_cache:
          paths:
            - ./backend/.mypy_cache
            - /home/circleci/.cache/pypoetry/
          key: backend-v2-{{ .Branch }}-{{ checksum "backend/pyproject.lock" }}
      - run:
          name: run tests
          working_directory: backend
          command: ./s/test
      - store_test_results:
          path: backend/reports

  backend_lint:
    docker:
      - image: circleci/python:3.6.4
        environment:
          DEBUG: 1
          DATABASE_URL: postgres://postgres@127.0.0.1:5432/postgres
          PIPENV_VENV_IN_PROJECT: 1
      # https://circleci.com/docs/2.0/postgres-config/#optimizing-postgres-images
      - image: circleci/postgres:9.5-alpine-ram
    steps:
      - checkout
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - backend-v2-{{ .Branch }}-{{ checksum "backend/pyproject.lock" }}
            - backend-v2-{{ .Branch }}-
            - backend-v2-
      - run:
          name: install dependencies
          working_directory: backend
          command: |
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            # Use our new PATH so we can call poetry from bash
            source $BASH_ENV
            python3 -m pip install --user poetry===0.11.5
            poetry install
      - save_cache:
          paths:
            - ./backend/.mypy_cache
            - /home/circleci/.cache/pypoetry/
          key: backend-v2-{{ .Branch }}-{{ checksum "backend/pyproject.lock" }}
      - run:
          name: run lints
          working_directory: backend
          command: ./s/lint
      - store_test_results:
          path: backend/reports

  frontend_test:
    docker:
      - image: recipeyak/node-puppeteer:latest
        environment:
          DEBUG: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-v1-dependencies-{{ checksum "frontend/package.json" }}
            - frontend-v1-dependencies-
      - run:
          name: install dependencies
          working_directory: frontend
          command: |
            yarn install
      - save_cache:
          paths:
            - ./frontend/node_modules
          key: frontend-v1-dependencies-{{ checksum "frontend/package.json" }}
      - run:
          name: run tests
          working_directory: frontend
          command: ./s/test

  frontend_lint:
    docker:
      - image: recipeyak/node-puppeteer:latest
        environment:
          DEBUG: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-v1-dependencies-{{ checksum "frontend/package.json" }}
            - frontend-v1-dependencies-
      - run:
          name: install dependencies
          working_directory: frontend
          command: |
            yarn install
      - save_cache:
          paths:
            - ./frontend/node_modules
          key: frontend-v1-dependencies-{{ checksum "frontend/package.json" }}
      - run:
          name: run linter
          working_directory: frontend
          command: |
            ./s/lint
            ./s/build
            mkdir -p /tmp/frontend-artifacts
            cp -R build/* /tmp/frontend-artifacts
      - store_artifacts:
          path: /tmp/frontend-artifacts

  # https://circleci.com/docs/2.0/building-docker-images/
  build_api_container:
    requires:
      - backend_test
      - backend_lint
    docker:
      - image: docker:18.05.0-ce
    steps:
      - checkout
      - setup_remote_docker
      # https://circleci.com/docs/2.0/env-vars/#circleci-built-in-environment-variables
      - run:
          name: build container
          working_directory: backend
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker build -f Dockerfile-prod \
              --tag recipeyak/django:$CIRCLE_SHA1 \
              --build-arg GIT_SHA=$CIRCLE_SHA1 .
            docker push recipeyak/django:$CIRCLE_SHA1

  # https://circleci.com/docs/2.0/building-docker-images/
  build_ui_container:
    requires:
      - frontend_test
      - frontend_lint
    docker:
      - image: docker:18.05.0-ce
    steps:
      - checkout
      - setup_remote_docker
      # https://circleci.com/docs/2.0/env-vars/#circleci-built-in-environment-variables
      - run:
          name: build container
          working_directory: frontend
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker build -f Dockerfile-prod \
              --tag recipeyak/react:$CIRCLE_SHA1 \
              --build-arg OAUTH_BITBUCKET_CLIENT_ID=${OAUTH_BITBUCKET_CLIENT_ID-""} \
              --build-arg OAUTH_FACEBOOK_CLIENT_ID=${OAUTH_FACEBOOK_CLIENT_ID-""} \
              --build-arg OAUTH_GITHUB_CLIENT_ID=${OAUTH_GITHUB_CLIENT_ID-""} \
              --build-arg OAUTH_GITLAB_CLIENT_ID=${OAUTH_GITLAB_CLIENT_ID-""} \
              --build-arg OAUTH_GOOGLE_CLIENT_ID=${OAUTH_GOOGLE_CLIENT_ID-""} \
              --build-arg GIT_SHA=$CIRCLE_SHA1 \
              --build-arg FRONTEND_SENTRY_DSN=$FRONTEND_SENTRY_DSN .
            docker push recipeyak/react:$CIRCLE_SHA1

  build_proxy_container:
    docker:
      - image: docker:18.05.0-ce
    steps:
      - checkout
      - setup_remote_docker
      # https://circleci.com/docs/2.0/env-vars/#circleci-built-in-environment-variables
      - run:
          name: build container
          working_directory: nginx
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker build -f Dockerfile \
              --tag recipeyak/nginx:$CIRCLE_SHA1 .
            docker push recipeyak/nginx:$CIRCLE_SHA1

workflows:
  version: 2
  test:
    jobs:
      - backend_test
      - backend_lint
      - frontend_test
      - frontend_lint
      - build_api_container:
          context: DockerHub
          filters:
            branches:
              only: master
      - build_ui_container:
          context: DockerHub
          filters:
            branches:
              only: master
      - build_proxy_container:
          context: DockerHub
          filters:
            branches:
              only: master
