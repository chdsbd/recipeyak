version: 2

jobs:
  backend_test:
    docker:
      - image: recipeyak/base:v3
      # https://circleci.com/docs/2.0/postgres-config/#optimizing-postgres-images
      - image: circleci/postgres:9.5-alpine-ram
        command:
          [
            "-c",
            'shared_preload_libraries="pg_stat_statements"',
            "-c",
            "pg_stat_statements.max=10000",
            "-c",
            "pg_stat_statements.track=all",
          ]
    steps:
      - checkout
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - backend-v9-{{ checksum "poetry.lock" }}
      - run:
          name: install dependencies
          command: |
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            # Use our new PATH so we can call poetry from bash
            source $BASH_ENV
            poetry install
      - save_cache:
          paths:
            - ./backend/.mypy_cache
            - /root/.cache/
          key: backend-v9-{{ checksum "poetry.lock" }}
      - run:
          name: run tests
          command: poetry run yak test --api
      - store_test_results:
          path: backend/reports

  backend_lint:
    docker:
      - image: recipeyak/base:v3
      # https://circleci.com/docs/2.0/postgres-config/#optimizing-postgres-images
      - image: circleci/postgres:9.5-alpine-ram
    steps:
      - checkout
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - backend-v9-{{ checksum "poetry.lock" }}
      - run:
          name: install dependencies
          command: |
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            # Use our new PATH so we can call poetry from bash
            source $BASH_ENV
            poetry install
      - save_cache:
          paths:
            - ./backend/.mypy_cache
            - /root/.cache/
          key: backend-v9-{{ checksum "poetry.lock" }}
      - run:
          name: run lints
          command: poetry run yak lint --api
      - store_test_results:
          path: backend/reports

  squawk:
    docker:
      - image: recipeyak/base:v3
      # https://circleci.com/docs/2.0/postgres-config/#optimizing-postgres-images
      - image: circleci/postgres:9.5-alpine-ram
    steps:
      - checkout
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - backend-v9-{{ checksum "poetry.lock" }}
      - run:
          name: install dependencies
          command: |
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            # Use our new PATH so we can call poetry from bash
            source $BASH_ENV
            poetry install
      - run:
          name: run lints
          command: ./s/squawk.py

  frontend_test:
    docker:
      - image: recipeyak/base:v3
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-v8-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: install dependencies
          command: |
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            # Use our new PATH so we can call poetry from bash
            source $BASH_ENV
            poetry install
            yarn install --frozen-lockfile --cache-folder /root/.cache/yarn
      - save_cache:
          paths:
            - /root/project/node_modules
            - /root/.cache/
          key: frontend-v8-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: run tests
          command: poetry run yak test --web

  frontend_lint:
    docker:
      - image: recipeyak/base:v3
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-v8-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: install dependencies
          command: |
            echo 'export PATH="$PATH":"$HOME"/.local/bin' >> $BASH_ENV
            # Use our new PATH so we can call poetry from bash
            source $BASH_ENV
            poetry install
            yarn install --frozen-lockfile --cache-folder /root/.cache/yarn
      - save_cache:
          paths:
            - /root/project/node_modules
            - /root/.cache/
          key: frontend-v8-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: run linter
          command: |
            poetry run yak lint --web
            poetry run yak build --web
      - run:
          name: move artifacts
          working_directory: frontend
          # copy bundle analyzer report
          command: |
            mkdir -p /tmp/frontend-artifacts
            cp -R build/report.html build/webpack-stats.json /tmp/frontend-artifacts
      - store_artifacts:
          path: /tmp/frontend-artifacts

  docker_lint:
    docker:
      - image: recipeyak/base:v3
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yarn global add fd-find@1.0.6
            curl -L https://github.com/hadolint/hadolint/releases/download/v1.17.1/hadolint-Linux-x86_64 -o hadolint
            chmod +x hadolint
            mv hadolint /bin/
      - run:
          name: run linter
          command: |
            fd Dockerfile | xargs hadolint

  shellcheck:
    docker:
      - image: recipeyak/base:v3
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            apt-get install -y git shellcheck
      - run:
          name: run shellcheck
          command: |
            ./s/shellcheck

  # https://circleci.com/docs/2.0/building-docker-images/
  build_api_container:
    docker:
      - image: docker:18.05.0-ce
    steps:
      - checkout
      - setup_remote_docker
      # https://circleci.com/docs/2.0/env-vars/#circleci-built-in-environment-variables
      - run:
          name: build container
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker build -f backend/django.Dockerfile \
              --tag recipeyak/django:$CIRCLE_SHA1 \
              --build-arg GIT_SHA=$CIRCLE_SHA1 .
            docker push recipeyak/django:$CIRCLE_SHA1

  # https://circleci.com/docs/2.0/building-docker-images/
  build_ui_container:
    docker:
      - image: docker:18.05.0-ce
    steps:
      - checkout
      - setup_remote_docker
      # https://circleci.com/docs/2.0/env-vars/#circleci-built-in-environment-variables
      - run:
          name: build container
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker build -f frontend/react.Dockerfile \
              --tag recipeyak/react:$CIRCLE_SHA1 \
              --build-arg OAUTH_BITBUCKET_CLIENT_ID=${OAUTH_BITBUCKET_CLIENT_ID-""} \
              --build-arg OAUTH_FACEBOOK_CLIENT_ID=${OAUTH_FACEBOOK_CLIENT_ID-""} \
              --build-arg OAUTH_GITHUB_CLIENT_ID=${OAUTH_GITHUB_CLIENT_ID-""} \
              --build-arg OAUTH_GITLAB_CLIENT_ID=${OAUTH_GITLAB_CLIENT_ID-""} \
              --build-arg OAUTH_GOOGLE_CLIENT_ID=${OAUTH_GOOGLE_CLIENT_ID-""} \
              --build-arg GIT_SHA=$CIRCLE_SHA1 \
              --build-arg FRONTEND_SENTRY_DSN=$FRONTEND_SENTRY_DSN .
            docker push recipeyak/react:$CIRCLE_SHA1

  build_proxy_container:
    docker:
      - image: docker:18.05.0-ce
    steps:
      - checkout
      - setup_remote_docker
      # https://circleci.com/docs/2.0/env-vars/#circleci-built-in-environment-variables
      - run:
          name: build container
          working_directory: nginx
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker build -f nginx.Dockerfile \
              --tag recipeyak/nginx:$CIRCLE_SHA1 .
            docker push recipeyak/nginx:$CIRCLE_SHA1

  build_postgres_container:
    docker:
      - image: docker:18.05.0-ce
    steps:
      - checkout
      - setup_remote_docker
      # https://circleci.com/docs/2.0/env-vars/#circleci-built-in-environment-variables
      - run:
          name: build container
          working_directory: postgres
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker build -f postgres.Dockerfile \
              --tag recipeyak/postgres:$CIRCLE_SHA1 .
            docker push recipeyak/postgres:$CIRCLE_SHA1

  build_pgdump_container:
    docker:
      - image: docker:18.05.0-ce
    steps:
      - checkout
      - setup_remote_docker
      # https://circleci.com/docs/2.0/env-vars/#circleci-built-in-environment-variables
      - run:
          name: build container
          working_directory: pgdump
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker build -f pgdump.Dockerfile \
              --tag recipeyak/pgdump:$CIRCLE_SHA1 .
            docker push recipeyak/pgdump:$CIRCLE_SHA1

  build_redis_container:
    docker:
      - image: docker:18.05.0-ce
    steps:
      - checkout
      - setup_remote_docker
      # https://circleci.com/docs/2.0/env-vars/#circleci-built-in-environment-variables
      - run:
          name: build container
          working_directory: redis
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker build -f redis.Dockerfile \
              --tag recipeyak/redis:$CIRCLE_SHA1 .
            docker push recipeyak/redis:$CIRCLE_SHA1

workflows:
  version: 2
  test:
    jobs:
      - squawk
      - backend_test
      - backend_lint
      - frontend_test
      - frontend_lint
      - docker_lint
      - shellcheck
      - build_api_container:
          context: DockerHub
          requires:
            - backend_test
            - backend_lint
          filters:
            branches:
              only: master
      - build_ui_container:
          context: DockerHub
          requires:
            - frontend_test
            - frontend_lint
          filters:
            branches:
              only: master
      - build_proxy_container:
          context: DockerHub
          filters:
            branches:
              only: master
      - build_postgres_container:
          context: DockerHub
          filters:
            branches:
              only: master
      - build_pgdump_container:
          context: DockerHub
          filters:
            branches:
              only: master
      - build_redis_container:
          context: DockerHub
          filters:
            branches:
              only: master
