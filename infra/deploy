#!/bin/bash
set -eu

step() {
	echo -e "\n--> $1"
}

error() {
	echo -e "\nerror: $1">&2
}

main() {
	SHA="$*"
        step "starting deploy version sha:$SHA"
	if [ -e "deploy:in-progress" ]; then
            error "error: deploy already in progress"
            exit 1
	fi
    	echo "$SHA" > "deploy:in-progress"

	step "pulling latest container images"
	docker pull recipeyak/django:"$SHA"
	docker pull recipeyak/react:"$SHA"

    step "fetching repository"
    rm -rf recipeyak
    git clone https://github.com/recipeyak/recipeyak recipeyak
    pushd recipeyak
        git checkout "$SHA"

        step "updating background jobs"
        mkdir -p /etc/recipeyak/
        cp -f infra/etc/recipeyak/* /etc/recipeyak/
        cp -f infra/systemd-services/* /etc/systemd/system/
        sed -i "s/{{GIT_SHA}}/$SHA/g" /etc/systemd/system/recipeyak-*.service
        systemctl daemon-reload

        systemctl restart 'recipeyak-*.service'

        # enable timers
        find infra/systemd-services/ -name '*.timer' -printf '%f\n' | xargs systemctl enable --now
        # no need to restart anything since they're running on timers, which
        # will get the new version on restart

        # migrations
        step "running migrations"
        docker run --network host --name migrations --log-driver=journald --env-file=/root/.env-production recipeyak/django:"$SHA" /var/app/.venv/bin/python ./manage.py migrate

        step "updating api"
        docker stop django
        docker rm django
        docker run --detach --restart unless-stopped --name django --network host --log-driver=journald --env-file=/root/.env-production recipeyak/django:"$SHA"

        step "updating ui"
        docker run --name react --network host --log-driver=journald --env-file=/root/.env-production recipeyak/react:"$SHA"
        tmp=$(mktemp -d)
        docker cp react:/var/app "$tmp"
        rsync --archive --recursive --verbose "$tmp/app/" /var/app/dist/

        
        rm -f /etc/nginx/sites-enabled/default
        cp infra/nginx/recipeyak.conf /etc/nginx/sites-available/recipeyak
        cp infra/nginx/recipeyak_headers.conf /etc/nginx/snippets/
        ln -sf /etc/nginx/sites-available/recipeyak /etc/nginx/sites-enabled/

        step "test nginx config"
        nginx -t
        
        step "reload nginx"
        systemctl reload nginx
        
        popd

	step "prunning old docker containers"
	# we could do something like "keep the 3 most recent versions per container name" but this is easy enough
	# docker system prune --all --force --volumes --filter "until=720h"
	docker system prune --all --force --volumes

	mv "deploy:in-progress" "deploy:complete"
	step "deployed version sha:$SHA"
}


main "$@"
